#!/bin/bash
function quit {
	#rmdir /dev/shm/quake_lock
	exit
}

POS_DIR=/dev/shm/win_positions
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
get_name=$DIR/get_name
get_end_pos=$DIR/get_end_pos

#if ! mkdir /dev/shm/quake_lock; then
#	exit
#fi


! [[ -d $POS_DIR ]] && mkdir $POS_DIR

direction="bottom"
forget=false
global=false
speed=40
framerate=60
animate=true
win=""

while getopts ':d:s:w:n:Agf' flag; do
	case "${flag}" in
		d) 
			direction="$OPTARG"
		;;
		w)
			win="$OPTARG"
		;;
		s)
			speed="$OPTARG"
		;;
		f)
			forget=true
		;;
		g)
			global=true
		;;
		A)
			animate=false
		;;
		?)

		;;
  esac
done

name=$(get_name $@)

function forget {
	local name="$1"
	local win="$2"
	# TODO should we save the original classnames and restore them upon forgetting?
	bspc rule -r *:$name state=floating layer=above
	xdotool set_window --classname "forgotten" $win
}

#focused ei pitäis käyttää jos löytyy jo ikkuna
function get_win {
	local name="$1"
	local win="$2"
	local existing=$(xdotool search --classname '^'$name'$')
	if [[ -n $existing ]]; then
		if [[ -n $win ]] && [[ $existing != $win ]]; then
			forget $name $existing
			xdotool windowmap $existing
			bspc node $existing -t tiled # pop window to desktop
			echo $win
			return
		fi
		echo $existing
		return
	fi
	if [[ -n $win ]]; then
		echo $win
	else
		echo $(xdotool getwindowfocus)
	fi
}

function hide_others {
	local dir=$1
	local show_win=$2

	xdotool search --classname --onlyvisible '_'$dir'_quaked' | while read _win; do
		if [[ -n $_win && $_win != $show_win ]]; then 
			local xy=$(get_end_pos $params -d $dir -w $_win)
			local end_x=$(echo $xy | awk '{print $1}')
			local end_y=$(echo $xy | awk '{print $2}')

			move_animation $_win $x $y $end_x $end_y
			xdotool windowunmap $_win
		fi
	done
}

function move_animation {
	local win=$1
	local start_x=$2
	local start_y=$3
	local end_x=$4
	local end_y=$5

	xdotool windowmap $win

	[[ $animate == false ]] && xdotool windowmove --sync $win $end_x $end_y
	[[ $animate == false ]] && return 1

	xdotool windowmove $win $start_x $start_y

	for axis in "x" "y"; do
		start="start_"$axis
		end="end_"$axis
		sequence=$axis"_seq"

		gap=1
		[[ ${!start} -gt ${!end} ]] && gap='-'$gap

		for i in $(seq ${!start} $gap ${!end}); do
			declare $sequence="${!sequence}"$i$'\n'
		done

		declare $sequence="${!sequence}"${!end}
		len_var=$axis"_len"

		declare $len_var=$(echo "${!sequence}" | wc -l)
	done

	# even column lengths
	if [[ $x_len != $y_len ]]; then
		shorter=$x_seq
		longer=$y_seq
		dist=$(($y_len - $x_len))
		if [[ $x_len -gt $y_len ]]; then
			shorter=$y_seq
			longer=$x_seq
			dist=$(($x_len - $y_len))
		fi

		last=$(echo "$shorter" | tail -n 1)
		for i in $(seq 1 $dist); do
			shorter=$shorter$'\n'$last
		done

		if [[ $x_len -gt $y_len ]]; then
			y_seq=$shorter
		else
			x_seq=$shorter
		fi
	fi

	columns=$(paste -d " " <(echo "$x_seq") <(echo "$y_seq"))
	interval=$((1000 / $framerate))

	function get_millis {
		echo $(($(date +%s%N)/1000000))
	}

	now=$(get_millis)
	gone=0
	lines_amount=$(wc -l <<< "$columns")

	while [[ $gone -lt $speed ]]; do
		gone_of_second_ratio=$(echo "scale=3; $gone / $speed" | bc)
		line_c=$(($(echo "$lines_amount * $gone_of_second_ratio" | bc | awk '{printf("%d\n",$1 + 0.5)}') + 1))
		xy="$(sed -n "$line_c"p <<< "$columns")"
		xdotool windowmove --sync $win $xy
		sleep 0.00"$interval"
		gone=$(($(get_millis) - $now))
	done
	xdotool windowmove --sync $win $(tail -n 1 <<< "$columns")
}

function cache_pos {
	name="$1"
	geometry="$2"
	x=$(echo "$geometry" | sed -n 2p | awk -F '=' '{print $2}')
	y=$(echo "$geometry" | sed -n 3p | awk -F '=' '{print $2}')
	echo "$x $y" > $POS_DIR/$name
}

win=$(get_win $name $win)

if [[ $forget == true ]]; then
	forget $name $win
	quit
fi

bspc rule -a *:$name state=floating layer=above
[[ $global == true ]] && bspc rule -a *:$name sticky=on

size=$(cat /dev/shm/xrandr_output | grep $(query_primary) | awk '{print $4}')
width=$(echo $size | awk -F 'x' '{print $1}')
height=$(echo $size | awk -F 'x' '{print $2}' | awk -F '+' '{print $1}')

if [[ -z $(xdotool search --classname '^'$name'$') && -z $(xdotool search --classname --onlyvisible $direction"_quaked") ]]; then
	win_height=$height
	win_width=$width

	if [[ $direction == "bottom" || $direction == "top" ]]; then
		win_height=$(($height / 3))
	else
		win_width=$(($width / 3))
	fi

	x_offset=0
	y_offset=0
	if [[ $direction == "bottom" ]]; then
		y_offset=$(($height - $win_height))
	elif [[ $direction == "right" ]]; then
		x_offset=$(($width - $win_width))
	elif [[ $direction == "left" || $direction == "top" ]]; then
		x_offset=0
	fi

	geometry=$(xdotool getwindowgeometry -shell $win)
	x=$(echo "$geometry" | sed -n 2p | awk -F '=' '{print $2}')
	y=$(echo "$geometry" | sed -n 3p | awk -F '=' '{print $2}')

	xdotool set_window --classname $name $win
	bspc node $win -t floating -l above
	xdotool windowsize --sync $win $win_width $win_height

	xdotool windowmove --sync $win $x $y
	move_animation $win $x $y $x_offset $y_offset
	xdotool windowsize $win $win_width $win_height
	xdotool windowactivate $win
else
	geometry=$(xdotool getwindowgeometry -shell $win)
	x=$(cat $POS_DIR/$name | awk '{print $1}')
	y=$(cat $POS_DIR/$name | awk '{print $2}')
	win_width=$(echo "$geometry" | sed -n 4p | awk -F '=' '{print $2}')
	win_height=$(echo "$geometry" | sed -n 5p | awk -F '=' '{print $2}')

	if [[ -z $(xdotool search --classname --onlyvisible '^'$name'$') ]]; then
		if [[ $(xdotool getwindowfocus) == $win ]]; then
			xdotool windowactivate $win
			quit
		fi

		hide_others $direction $win &
		sleep 0.05

		if [[ $direction == "top" || $direction == "bottom" ]]; then
			start_x=$x
		elif [[ $direction == "left" || $direction == "right" ]]; then
			start_y=$y
		fi

		case "${direction}" in
		top)
			start_y='-'$win_height
			;;
		bottom)
			start_y=$(($height + $win_height))
			;;
		left)
			start_x='-'$win_width
			;;
		right)
			start_x=$(($width + $win_width))
			;;
		esac

		move_animation $win $start_x $start_y $x $y
		xdotool windowactivate $win

		cache_pos "$name" "$geometry"
	else
		if [[ $(xdotool getwindowfocus) != $win ]]; then
			xdotool windowactivate $win
			quit
		fi

		cache_pos "$name" "$geometry"

		xy=$(get_end_pos $@)
		end_x=$(echo $xy | awk '{print $1}')
		end_y=$(echo $xy | awk '{print $2}')

		move_animation $win $x $y $end_x $end_y
		xdotool windowunmap $win
	fi
fi

quit

update_wallpaper
