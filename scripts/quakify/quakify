#!/bin/bash
function quit {
	#rmdir /dev/shm/quake_lock
	exit
}


QUAKER=/dev/shm/quakify
GLOBAL_ACTIVER_DAEMON_PID=$QUAKER/global_pid
WINS_TO_NAMES=$QUAKER/wins_to_names
NAMES_TO_WINS=$QUAKER/names_to_wins
NAMES_TO_POS=$QUAKER/names_to_pos
WINS_TO_SIZES=$QUAKER/wins_to_sizes
WINS_TO_LAYERS=$QUAKER/wins_to_layers
WINS_TO_STATES=$QUAKER/wins_to_states
WINS_TO_STICKY=$QUAKER/wins_to_sticky
ANIM_SEQ_CACHE=$QUAKER/anim_seq_cache

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
get_name=$DIR/get_name
get_end_pos=$DIR/get_end_pos

! [[ -d $NAMES_TO_POS ]] && mkdir -p $NAMES_TO_POS
! [[ -d $WINS_TO_SIZES ]] && mkdir -p $WINS_TO_SIZES
! [[ -d $WINS_TO_NAMES ]] && mkdir -p $WINS_TO_NAMES
! [[ -d $NAMES_TO_WINS ]] && mkdir -p $NAMES_TO_WINS
! [[ -d $WINS_TO_LAYERS ]] && mkdir -p $WINS_TO_LAYERS
! [[ -d $WINS_TO_STATES ]] && mkdir -p $WINS_TO_STATES
! [[ -d $WINS_TO_STICKY ]] && mkdir -p $WINS_TO_STICKY
! [[ -d $ANIM_SEQ_CACHE ]] && mkdir -p $ANIM_SEQ_CACHE

direction="bottom"
forget_flag=false
global=false
speed=40
framerate=60
animate=false
win=""

while getopts ':d:s:w:n:agfh' flag; do
	case "${flag}" in
		d) 
			direction="$OPTARG"
		;;
		w)
			win="$OPTARG"
			if [[ -z $win ]]; then
				quit
			fi
		;;
		s)
			speed="$OPTARG"
		;;
		f)
			forget_flag=true
		;;
		g)
			global=true
		;;
		a)
			animate=true
		;;
		h)
			echo "\
SYNTAX
	-d DIRECTION (top|bottom|left|right)
		Direction. Defaults to bottom.
	-w ID
		Window id to use. Defaults to active window.
	-f 
		Unquakifies a quakified window, restoring the state of the window.
	-g 
		Makes the quakified window global (accessible on any desktop).
	-a 
		Enable the transition animation.
	-s SPEED
		Animation speed (relative to framerate). Defaults to 40."
			exit
		;;
  esac
done

name=$(get_name $@)

function get_visible_wins {
	xdotool search --name --onlyvisible .
}

visible_wins="$(get_visible_wins)"

function forget {
	local win="$1"
	local name=$(cat $WINS_TO_NAMES/$win)
	local state=$(cat $WINS_TO_STATES/$win)
	local layer=$(cat $WINS_TO_LAYERS/$win)
	local sticky=$(cat $WINS_TO_STICKY/$win)
	[[ -n $state ]] && bspc node $win -t $state
	[[ -n $layer ]] && bspc node $win -l $layer
	[[ $sticky == true ]] && bspc node $win -g sticky
	rm $NAMES_TO_POS/$name
	rm $NAMES_TO_WINS/$name
	rm $WINS_TO_STATES/$win
	rm $WINS_TO_STICKY/$win
	rm $WINS_TO_LAYERS/$win
	rm $WINS_TO_NAMES/$win
}

function get_win {
	local name="$1"
	local win="$2"
	local existing=$(cat $NAMES_TO_WINS/$name 2>/dev/null)
	if [[ -n $existing ]]; then
		if [[ -n $win ]] && [[ $existing != $win ]]; then
			xdotool windowmap $existing
			forget $existing
			bspc node $existing -t $(cat $WINS_TO_STATES/$existing) # pop window to desktop
			return
		fi
		echo $existing
		return
	fi
	if [[ -n $win ]]; then
		echo $win
	else
		echo $(xdotool getwindowfocus)
	fi
}

function hide_others {
	local dir=$1
	local show_win=$2

	cat $NAMES_TO_WINS/*_"$dir"_quaked* 2>/dev/null | while read _win; do
		if [[ -n $(echo "$visible_wins" | grep $_win) && -n $_win && $_win != $show_win ]]; then 
			local xy=$(get_end_pos $params -d $dir -w $_win)
			local end_x=$(echo $xy | awk '{print $1}')
			local end_y=$(echo $xy | awk '{print $2}')

			move_away $_win $x $y $end_x $end_y
		fi
	done
}

function move_animation {
	local win=$1
	local start_x=$2
	local start_y=$3
	local end_x=$4
	local end_y=$5

	[[ $animate == false ]] && xdotool windowmove --sync $win $end_x $end_y
	[[ $animate == false ]] && return 1

	xdotool windowmove $win $start_x $start_y

	cache_key=$ANIM_SEQ_CACHE/$start_x"_"$start_y"_"$end_x"_"$end_y"_"$speed"_"$framerate

	columns=""

	if [[ -f $cache_key ]]; then
		columns="$(cat $cache_key)"
	else
		for axis in "x" "y"; do
			start="start_"$axis
			end="end_"$axis
			sequence=$axis"_seq"

			gap=1
			[[ ${!start} -gt ${!end} ]] && gap='-'$gap

			for i in $(seq ${!start} $gap ${!end}); do
				declare $sequence="${!sequence}"$i$'\n'
			done

			declare $sequence="${!sequence}"${!end}
			len_var=$axis"_len"

			declare $len_var=$(echo "${!sequence}" | wc -l)
		done

		# Even column lengths
		if [[ $x_len != $y_len ]]; then
			shorter=$x_seq
			longer=$y_seq
			dist=$(($y_len - $x_len))
			if [[ $x_len -gt $y_len ]]; then
				shorter=$y_seq
				longer=$x_seq
				dist=$(($x_len - $y_len))
			fi

			last=$(echo "$shorter" | tail -n 1)
			for i in $(seq 1 $dist); do
				shorter=$shorter$'\n'$last
			done

			if [[ $x_len -gt $y_len ]]; then
				y_seq=$shorter
			else
				x_seq=$shorter
			fi
		fi

		columns=$(paste -d " " <(echo "$x_seq") <(echo "$y_seq"))
		echo "$columns" > $cache_key &
	fi


	function get_millis {
		echo $(($(date +%s%N)/1000000))
	}

	now=$(get_millis)
	gone=0
	lines_amount=$(wc -l <<< "$columns")
	interval=$((1000 / $framerate))

	while [[ $gone -lt $speed ]]; do
		gone_of_second_ratio=$(echo "scale=3; $gone / $speed" | bc)
		line_c=$(($(echo "$lines_amount * $gone_of_second_ratio" | bc | awk '{printf("%d\n",$1 + 0.5)}') + 1))
		xy="$(sed -n "$line_c"p <<< "$columns")"
		xdotool windowmove --sync $win $xy
		sleep 0.00"$interval"
		gone=$(($(get_millis) - $now))
	done

	xdotool windowmove --sync $win $(tail -n 1 <<< "$columns")
}

function move_away {
	local win=$1
	local start_x=$2
	local start_y=$3
	local end_x=$4
	local end_y=$5
	local name=$(cat $WINS_TO_NAMES/$win)

	cache "$win" "$name" "$(xdotool getwindowgeometry -shell $win)"

	move_animation $direction $win $start_x $start_y $end_x $end_y

	if [[ $direction == "bottom" ]]; then
		end_y=$(($end_y - 1))
	elif [[ $direction == "top" ]]; then
		end_y=$(($end_y + 1))
	elif [[ $direction == "left" ]]; then
		end_x=$(($end_x + 1))
	elif [[ $direction == "right" ]]; then
		end_x=$(($end_x - 1))
	fi

	xdotool windowmove --sync $win $end_x $end_y
	sleep 0.04 # windowmove doesn't work in sync correctly, so we need to wait before hiding
	xdotool windowunmap --sync $win
}

function cache {
	local win="$1"
	local name="$2"
	local geometry="$3"
	local x=$(echo "$geometry" | sed -n 2p | awk -F '=' '{print $2}')
	local y=$(echo "$geometry" | sed -n 3p | awk -F '=' '{print $2}')
	local width=$(echo "$geometry" | sed -n 4p | awk -F '=' '{print $2}')
	local height=$(echo "$geometry" | sed -n 5p | awk -F '=' '{print $2}')
	echo "$x $y" > $NAMES_TO_POS/$name
	echo "$width $height" > $WINS_TO_SIZES/$win
	echo $name > $WINS_TO_NAMES/$win
}

if [[ ! -f $GLOBAL_ACTIVER_DAEMON_PID || $(ps $(cat $GLOBAL_ACTIVER_DAEMON_PID) | wc -l) < 2 ]]; then
	(bspc subscribe desktop_focus | while read line; do 
		visible_wins="$(get_visible_wins)"
		global_wins=$(cat $NAMES_TO_WINS"/quakify_global_"*"_quaked"* 2>/dev/null | head -n 1)
		visible_global_win=$(echo "$visible_wins" | grep $global_wins)

		[[ -n $global_wins ]] && for win in $visible_global_win; do
			if [[ -n $(echo "$global_wins" | grep $win) ]]; then
				xdotool windowactivate $visible_global_win
				break
			fi
		done
	done) &
	echo $! > $GLOBAL_ACTIVER_DAEMON_PID
fi

win=$(get_win $name $win)

validate_win $win $name
is_valid=$?
if [[ $is_valid == 1 ]]; then
	quakify "$@"
	quit
fi

if [[ $forget_flag == true ]]; then
	forget $win
	quit
fi

[[ $global == true ]] && bspc node $win -g sticky=on

size=$(cat /dev/shm/xrandr_output | grep ^$(query_primary) | awk '{print $4}')
display_width=$(echo $size | awk -F 'x' '{print $1}')
display_height=$(echo $size | awk -F 'x' '{print $2}' | awk -F '+' '{print $1}')

# Format windows to grep or format (eg. 1 2 3 4 -> 1|2|3|4)
desktop_dir_quakified="$(cat $NAMES_TO_WINS"/*"$direction"_quaked"* 2>/dev/null | sed 's/ /\\\|/g')"

# If there is no quakified window at the desktop/direction position, we quakify the given window.
if [[ -z $(ls $WINS_TO_NAMES/$win) && 
	-z $(ls $NAMES_TO_WINS/$name 2>/dev/null) && 
	(-z $desktop_dir_quakified || -n $(echo "$visible_wins" | grep $desktop_dir_quakified)) 
	]]; then
	win_width=$display_width
	win_height=$display_height

	if [[ $direction == "bottom" || $direction == "top" ]]; then
		win_height=$(($display_height / 3))
	else
		win_width=$(($display_width / 3))
	fi

	x_offset=0
	y_offset=0
	if [[ $direction == "bottom" ]]; then
		y_offset=$(($display_height - $win_height))
	elif [[ $direction == "right" ]]; then
		x_offset=$(($display_width - $win_width))
	elif [[ $direction == "left" || $direction == "top" ]]; then
		x_offset=0
	fi

	geometry=$(xdotool getwindowgeometry -shell $win)
	x=$(echo "$geometry" | sed -n 2p | awk -F '=' '{print $2}')
	y=$(echo "$geometry" | sed -n 3p | awk -F '=' '{print $2}')

	echo $win > $NAMES_TO_WINS/$name
	echo $(bspc query -T -m | jq ".. | select(.id==$win?).client.layer" | sed 's/"//g') > $WINS_TO_LAYERS/$win
	echo $(bspc query -T -m | jq ".. | select(.id==$win?).client.state" | sed 's/"//g') > $WINS_TO_STATES/$win
	echo $(bspc query -T -m | jq ".. | select(.id==$win?).sticky") > $WINS_TO_STICKY/$win

	bspc node $win -t floating -l above
	xdotool windowsize --sync $win $win_width $win_height

	xdotool windowmove --sync $win $x $y
	xdotool windowmap $win
	move_animation $win $x $y $x_offset $y_offset
	xdotool windowsize $win $win_width $win_height
	xdotool windowactivate $win
	cache "$win" "$name" "$(xdotool getwindowgeometry -shell $win)"
else # There is a quakified window at the desktop/direction position, we show/hide that window.
	geometry=$(xdotool getwindowgeometry -shell $win)

	x=$(cat $NAMES_TO_POS/$name | awk '{print $1}')
	y=$(cat $NAMES_TO_POS/$name | awk '{print $2}')
	win_width=$(echo "$geometry" | sed -n 4p | awk -F '=' '{print $2}')
	win_height=$(echo "$geometry" | sed -n 5p | awk -F '=' '{print $2}')

	# Show the quakified window
	if [[ -z $(ls $NAMES_TO_WINS/$name 2>/dev/null) || -z $(echo "$visible_wins" | grep $(cat $NAMES_TO_WINS/$name)) ]]; then
		hide_others $direction $win &

		if [[ $direction == "top" || $direction == "bottom" ]]; then
			start_x=$x
		elif [[ $direction == "left" || $direction == "right" ]]; then
			start_y=$y
		fi

		case "${direction}" in
		top)
			start_y='-'$win_height
			;;
		bottom)
			start_y=$(($display_height + $win_height))
			;;
		left)
			start_x='-'$win_width
			;;
		right)
			start_x=$(($display_width + $win_width))
			;;
		esac

		bspc node $win -t floating -l above
		xdotool windowmap --sync $win 
		move_animation $win $start_x $start_y $x $y
		xdotool windowactivate $win
	else # Hide the quakified window
		if [[ $(xdotool getwindowfocus) != $win ]]; then
			xdotool windowactivate $win
			quit
		fi

		xy=$(get_end_pos $@)
		end_x=$(echo $xy | awk '{print $1}')
		end_y=$(echo $xy | awk '{print $2}')

		move_away $win $x $y $end_x $end_y
	fi
fi

quit

update_wallpaper
